<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sleepy Coding</title><link href="https://sopoforic.github.io/" rel="alternate"></link><link href="https://sopoforic.github.io/feeds/misc.atom.xml" rel="self"></link><id>https://sopoforic.github.io/</id><updated>2015-07-02T23:03:14-04:00</updated><entry><title>Status Update: 2015-07-02 23:03:14</title><link href="https://sopoforic.github.io/status-update-2015-07-02-230314.html" rel="alternate"></link><updated>2015-07-02T23:03:14-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2015-07-02:status-update-2015-07-02-230314.html</id><summary type="html">&lt;p&gt;Status&amp;nbsp;update.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Project&lt;/th&gt;
&lt;th align="right"&gt;Status&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Books to sort&lt;/td&gt;
&lt;td align="right"&gt;3140&lt;/td&gt;
&lt;td&gt;Rapid progress lately.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="caps"&gt;LT&lt;/span&gt; imported&lt;/td&gt;
&lt;td align="right"&gt;1689&lt;/td&gt;
&lt;td&gt;No progress lately.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="caps"&gt;TMFT&lt;/span&gt;&lt;/td&gt;
&lt;td align="right"&gt;73&lt;/td&gt;
&lt;td&gt;About a third done.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary><category term="personal"></category></entry><entry><title>Assembly</title><link href="https://sopoforic.github.io/assembly.html" rel="alternate"></link><updated>2015-06-17T15:20:56-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2015-06-17:assembly.html</id><summary type="html">&lt;p&gt;Recently, I saw a new game from Zachtronics, &lt;a href="http://www.zachtronics.com/tis-100/"&gt;&lt;span class="caps"&gt;TIS&lt;/span&gt;-100&lt;/a&gt;, which was released
&lt;a href="http://store.steampowered.com/app/370360/"&gt;on Steam&lt;/a&gt; as an early access title on the first of June. In some ways,
calling it a game is overstating it: it&amp;#8217;s basically just a collection of
programming problems with an interface. The catch is that you&amp;#8217;re programming in
an assembly language on a virtual machine with unusual architecture. Problems
beyond the simplest will generally require you to take advantage of parallelism
(which is the primary distinguishing feature of the &lt;span class="caps"&gt;VM&lt;/span&gt;) to solve, which leads to
some rather different solutions for traditional problems. It&amp;#8217;s neat, and I
suggest checking it&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;Obviously, a game like that has a rather limited target audience. Case in point:
I have previously created my own little &lt;span class="caps"&gt;VM&lt;/span&gt; with a fake assembly language to play
with. The game is clearly made just for me, but how many others are likely to be
similarly interested? About 11,000 so far, &lt;a href="http://steamspy.com/app/370360"&gt;apparently&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I had good fun playing the game, which reminded me that I&amp;#8217;ve been meaning to get
better at assembly. I&amp;#8217;ve made some (very) simple programs in x86 assembly
before, but I could really use some more practice and study. I &lt;a href="http://gameboy.mongenel.com/asmschool.html"&gt;looked into&lt;/a&gt;
learning a little Z80 assembly for the Game Boy, which dovetails nicely with my
interest in video games, and even built a little test &lt;span class="caps"&gt;ROM&lt;/span&gt;, but ultimately it
seemed more useful to study something I&amp;#8217;m a bit more likely to use. So, I&amp;#8217;ve
been reading &lt;a href="http://download-mirror.savannah.gnu.org/releases/pgubook/ProgrammingGroundUp-1-0-booksize.pdf"&gt;Programming from the Ground Up&lt;/a&gt;, which teaches Linux x86
assembly. It&amp;#8217;s a little old, and could seriously use some proofreading, but it&amp;#8217;s
a decent&amp;nbsp;resource.&lt;/p&gt;
&lt;p&gt;One error to note here: in Chapter 4, on page 63, there is a lovely diagram
indicating the current state of the stack at a certain point during the
execution of the code. Lovely, but wrong. It has the order of the &amp;#8220;Base Number&amp;#8221;
and &amp;#8220;Power&amp;#8221; reversed. When I first saw it, the reversed order made me think that
the top of the stack was at the top of the diagram, when in fact it is not. I
worked it out, of course, but it did cause me to do some double- and
triple-checking of the code to be sure. Caveat&amp;nbsp;lector.&lt;/p&gt;
&lt;p&gt;As for what purpose I&amp;#8217;ll eventually put this to&amp;#8230; I&amp;#8217;ve got some ambitions to
write an emulator, and I hope to transfer this knowledge to other platforms. In
particular, I&amp;#8217;m interested in looking at C64 assembly. It&amp;#8217;d be nice to look at
some of those old games with a better idea of what&amp;#8217;s going on! For now, though
it&amp;#8217;s just learning for the sake of learning. I&amp;#8217;m a way off from doing anything
very interesting with&amp;nbsp;it.&lt;/p&gt;</summary><category term="assembly"></category><category term="games"></category></entry><entry><title>Writing for Android</title><link href="https://sopoforic.github.io/writing-for-android.html" rel="alternate"></link><updated>2015-06-17T15:21:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2015-06-08:writing-for-android.html</id><summary type="html">&lt;p&gt;The last few days, I&amp;#8217;ve been looking into writing apps for android. I found a
framework, &lt;a href="http://kivy.org/#home"&gt;Kivy&lt;/a&gt;, that would let me write in python, which seemed like it&amp;#8217;d
be&amp;nbsp;nice.&lt;/p&gt;
&lt;p&gt;Results are&amp;nbsp;mixed.&lt;/p&gt;
&lt;p&gt;After some hours, I have indeed successfully created an android app. However,
the process was painful and tedious and I remembered partway through how much I
hate writing user interfaces, as I discovered that practically all of the coding
time was spent on the &lt;span class="caps"&gt;UI&lt;/span&gt;. My lack of familiarity with the framework led to some
truly awful code, which I&amp;#8217;ve slowly been refactoring. A thousand lines it should
not take for a simple database&amp;nbsp;app.&lt;/p&gt;
&lt;p&gt;On the plus side, the app does seem to be useful and serving its purpose, which
is more than I can say for a lot of what I code, so&amp;#8230; I&amp;#8217;d call this a minor&amp;nbsp;success.&lt;/p&gt;</summary><category term="kivy"></category><category term="android"></category></entry><entry><title>New project: cgrr-gamecube</title><link href="https://sopoforic.github.io/new-project-cgrr-gamecube.html" rel="alternate"></link><updated>2015-06-05T13:35:04-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2015-06-05:new-project-cgrr-gamecube.html</id><summary type="html">&lt;p&gt;After about six hours of work, I&amp;#8217;ve completed an initial release of a new
project: &lt;a href="https://github.com/sopoforic/cgrr-gamecube"&gt;cgrr-gamecube&lt;/a&gt;. At the moment, it is able to parse GameCube &lt;span class="caps"&gt;GCI&lt;/span&gt;
file headers, plus decode the banner from the &lt;span class="caps"&gt;GCI&lt;/span&gt; file (if it&amp;#8217;s in &lt;span class="caps"&gt;CI8&lt;/span&gt;&amp;nbsp;format).&lt;/p&gt;
&lt;p&gt;It also supports writing the &lt;span class="caps"&gt;GCI&lt;/span&gt; files back out, but only modifications to the
header are supported. That means no editing the banner, since it&amp;#8217;s stored in the
save data blocks, and not the header. In the future, I intend to add functions
specifically for replacing the&amp;nbsp;banner.&lt;/p&gt;
&lt;p&gt;Decoding the banner was something of a pain. The &lt;span class="caps"&gt;CI8&lt;/span&gt; image format isn&amp;#8217;t very
complicated, I suppose. It&amp;#8217;s a 16bpp paletted format with 5 bits per channel
plus one transparency bit, with the image stored as a series of 8x4 pixel tiles
(documentation forthcoming&amp;#8212;I used &lt;a href="http://www.surugi.com/projects/gcifaq.html"&gt;this page&lt;/a&gt;, myself). Not complicated, but
annoying to work with, since I had to first rewrite the colors to a more usable
format, and second reorder the image data so it wasn&amp;#8217;t all tiles. Though in
retrospect I suppose I could have actually decoded the image as tiles and then
pasted the tiles into a new image in the right positions. Not sure which would
have been&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;Anyway, everything went pretty smoothly, my dislike of the image format&amp;nbsp;aside.&lt;/p&gt;
&lt;p&gt;I think I may put together a frontend so I can extract &lt;span class="caps"&gt;GCI&lt;/span&gt; files rapidly, to
support my (potential) future efforts in decoding GameCube save files. One more
item for the todo list, I&amp;nbsp;suppose.&lt;/p&gt;</summary><category term="cgrr"></category><category term="gamecube"></category></entry><entry><title>CGRR transferred to github</title><link href="https://sopoforic.github.io/cgrr-transferred.html" rel="alternate"></link><updated>2015-06-01T11:57:31-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2015-06-01:cgrr-transferred.html</id><summary type="html">&lt;p&gt;After many months of procrastination, I&amp;#8217;ve finally split up my cgrr project and
transferred it to github. It took quite a while, but in the end I think it will
be much more maintainable and useful with each of the parser modules taken
separately than it would be with them all jammed together pretending to be
plugins for some yet-unwritten master program. If I want to write some wrapper
around them all later, they&amp;#8217;ll perfectly well support it, but until then, all
the plugin stuff is just an extra mess&amp;#8212;&lt;span class="caps"&gt;YAGNI&lt;/span&gt;.&lt;/p&gt;</summary><category term="cgrr"></category><category term="github"></category></entry><entry><title>Lessons in Efficiency</title><link href="https://sopoforic.github.io/lessons-in-efficiency.html" rel="alternate"></link><updated>2012-08-17T00:52:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2012-08-17:lessons-in-efficiency.html</id><summary type="html">&lt;p&gt;I was working on &lt;a href="http://projecteuler.net/problem=92"&gt;Project Euler problem 92&lt;/a&gt;,
and having a great deal of trouble making my program run fast enough. I’m aware
of a trick that can be used to reduce the problem space, but I thought that with
only ten million numbers to check, it should be possible to do it
straightforwardly and just check them all, as long as I wasn’t too inefficient
doing&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;My first successful version took about three minutes to run–much too slow. I
eliminated a duplicate call to an expensive function, which brought me down to
about two minutes, and at length I managed to reduce the runtime down to about
thirty seconds–much better, though still very slow. I tried some alternate
techniques and just couldn’t make it go any quicker while still using a brute
force&amp;nbsp;approach.&lt;/p&gt;
&lt;p&gt;Now, there’s one important thing I haven’t mentioned: on the Windows &lt;span class="caps"&gt;PC&lt;/span&gt; I’m
using for development, the version of gcc included with the Haskell Platform
doesn’t work. I can’t figure out why, but it makes it impossible to compile
Haskell programs, so I’ve just been running them in the interpreter. Well, that
gives away the ending to this anecdote: I copied the program to a (much slower)
Linux &lt;span class="caps"&gt;PC&lt;/span&gt; and compiled it, and it ran in about five seconds. Even my first, very
inefficient attempt would have been fast enough to satisfy the one minute rule.
But I learned a bit by trying to make the interpreted version fast enough to&amp;nbsp;pass.&lt;/p&gt;
&lt;p&gt;Lessons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Squaring a number with (n^2) is significantly slower than doing it with (n *&amp;nbsp;n).&lt;/li&gt;
&lt;li&gt;Arrays are faster to access than even fairly small&amp;nbsp;lists.&lt;/li&gt;
&lt;li&gt;It’s faster to compose several functions and then map them to a list than to
repeatedly map individual&amp;nbsp;functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, these apply to programs run through the interpreter–it’s quite
possible that at least the first of these might not hold if the program is
compiled. Maybe I’ll test it, some&amp;nbsp;time.&lt;/p&gt;</summary><category term="Haskell"></category><category term="Project Euler"></category></entry><entry><title>Learning Haskell</title><link href="https://sopoforic.github.io/learning-haskell.html" rel="alternate"></link><updated>2012-08-13T07:53:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2012-08-13:learning-haskell.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been learning Haskell (following &lt;a href="http://learnyouahaskell.com/"&gt;Learn You a Haskell for Great
Good!&lt;/a&gt;) and, although it&amp;#8217;s been fairly
mind-bending at times, I think I&amp;#8217;m progressing well enough. I still need to
learn the idiomatic ways to do things&amp;#8212;I guess I&amp;#8217;m still &amp;#8216;writing Python in
Haskell&amp;#8217;–but I&amp;#8217;m generally not too lost on what to do. Although since I&amp;#8217;m
currently using Haskell to solve Project Euler problems, I may be solving only
problems which are conducive to a functional&amp;nbsp;approach.&lt;/p&gt;</summary><category term="Haskell"></category></entry><entry><title>ffcollection update</title><link href="https://sopoforic.github.io/ffcollection-update.html" rel="alternate"></link><updated>2011-09-21T20:06:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2011-09-21:ffcollection-update.html</id><summary type="html">&lt;p&gt;Somehow, I didn&amp;#8217;t have the source code for ffcollection under version control.
No idea how I managed that, since it&amp;#8217;s usually the first thing I do. Stranger
still that I didn&amp;#8217;t notice I wasn&amp;#8217;t occasionally committing&amp;#8212;I don&amp;#8217;t use any
kind of automatic committing tool, so I&amp;#8217;m usually typing &amp;#8216;hg commit&amp;#8217; after
pretty much any little change. Version numbers are free, after all. Anyway, I
remedied that, and made some more progress. I need to make some minor changes to
the database schema, and the whole thing needs some serious refactoring, but
it&amp;#8217;s coming along pretty nicely. Certainly it&amp;#8217;s useful for me. Now, if only I
could make an interface that wasn&amp;#8217;t horrible, I&amp;#8217;d be pretty happy with things.
Well, some&amp;nbsp;day.&lt;/p&gt;</summary><category term="ffcollection"></category></entry><entry><title>ffcollection progress</title><link href="https://sopoforic.github.io/ffcollection-progress.html" rel="alternate"></link><updated>2011-07-06T05:29:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2011-07-06:ffcollection-progress.html</id><summary type="html">&lt;p&gt;I mentioned previously that I was working on a fanfiction database. Well, time
for an update: it’s in a functional state, though quite basic. I can feed it a
FanFiction.Net &lt;span class="caps"&gt;ID&lt;/span&gt; and it will download the fanfic and put it in the database
with some very basic metadata (author, &lt;span class="caps"&gt;ID&lt;/span&gt;, summary). Most recently, I’ve hacked
together an &lt;span class="caps"&gt;HTTP&lt;/span&gt; server using &lt;code&gt;http.server&lt;/code&gt; so that I can accept commands over
&lt;span class="caps"&gt;HTTP&lt;/span&gt;. Currently, the only command it accepts is ‘add the fanfic at this &lt;span class="caps"&gt;URL&lt;/span&gt;’,
and it just responds with a status page and a copy of the form to add the fic to
favoritestracker. I really should use something a little more powerful than just
&lt;code&gt;http.server.BaseHTTPRequestHandler&lt;/code&gt; for this&amp;#8212;I really ought to create a
full-fledged web interface, instead of just a commands-over-http hack. But, for
the moment, that’s what I’ve&amp;nbsp;got.&lt;/p&gt;</summary><category term="ffcollection"></category><category term="python"></category></entry><entry><title>750-to-org, v0.2</title><link href="https://sopoforic.github.io/750-to-org-v02.html" rel="alternate"></link><updated>2011-06-19T15:09:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2011-06-19:750-to-org-v02.html</id><summary type="html">&lt;p&gt;I did a little cleanup on the code for 750-to-org, so I went ahead and called it
0.2. I did some more testing, so unless 750 Words does something quite
unexpected, 750-to-org should just&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I should probably set 750-to-org up so you can give it filenames as arguments,
but other than that, I can’t think of much else I’d want it to do. I could have
it verify that it’s putting entries in the right places, in case the exports are
processed out of order, but that just seems like more work than is necessary.
Unless someone complains about it, I’m just going to leave&amp;nbsp;it.&lt;/p&gt;</summary><category term="750-to-org"></category></entry><entry><title>Lately</title><link href="https://sopoforic.github.io/lately.html" rel="alternate"></link><updated>2011-06-18T20:45:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2011-06-18:lately.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve neglected this blog, which I really shouldn&amp;#8217;t have done.&amp;nbsp;Well:&lt;/p&gt;
&lt;p&gt;I must reiterate what I said in my last post: when adding tags, I should
definitely specify the revision I want to tag, because I keep making stupid
mistakes, tagging the wrong&amp;nbsp;revisions.&lt;/p&gt;
&lt;p&gt;That said, new project:
&lt;a href="https://bitbucket.org/sopoforic/750-to-org/overview"&gt;750-to-org&lt;/a&gt;. It&amp;#8217;s just a
little python script to convert my 750 Words exports into a suitable format for
emacs org-mode. Nothing special, but I wanted it, so I figured I&amp;#8217;d put it out
there in case anyone else might have a use for it. I did learn a little more
about datetime by doing it, too. I doubt I&amp;#8217;ll ever remember the meanings of the
tokens for strftime, but at least I know it exists, now. It&amp;#8217;s much cleaner that
the way I was going to produce the date&amp;nbsp;strings.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve got a python/sqlalchemy fanfiction database thing I&amp;#8217;m making for my
personal use, but it&amp;#8217;s far from being in a fit state for public consumption.
More on that later,&amp;nbsp;perhaps.&lt;/p&gt;</summary><category term="mercurial"></category><category term="python"></category><category term="750-to-org"></category><category term="ffcollection"></category></entry><entry><title>Wasted Revisions</title><link href="https://sopoforic.github.io/wasted-revisions.html" rel="alternate"></link><updated>2010-08-27T23:00:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2010-08-27:wasted-revisions.html</id><summary type="html">&lt;p&gt;I just wasted half a dozen revisions trying to tag a release. Perhaps it’d be
better to just always specify the revision you’re tagging, just to avoid that&amp;nbsp;problem.&lt;/p&gt;</summary><category term="mercurial"></category></entry><entry><title>WordsPy Milestone</title><link href="https://sopoforic.github.io/wordspy-milestone.html" rel="alternate"></link><updated>2010-05-16T16:48:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2010-05-16:wordspy-milestone.html</id><summary type="html">&lt;p&gt;As of the most recent revision (r18:6453f11b96e6), WordsPy functions as a (bad)
game. The dictionary is hooked up, and it only lets you remove letters if they
form a word in the dictionary (That’s a rule. Games have rules. Ergo, game.&amp;nbsp;Right?).&lt;/p&gt;
&lt;p&gt;Other&amp;nbsp;features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selected letters are&amp;nbsp;highlighted&lt;/li&gt;
&lt;li&gt;Backspace&amp;nbsp;support&lt;/li&gt;
&lt;li&gt;Nonstop key-pressing&amp;nbsp;action!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next steps will be arranging it so the letter generator provides useful letters
rather than just random ones (probably just analyze the dictionary for letter
frequencies and use that), creating some kind of status display, and additional
nice things (score? list of words you made in that session? difficulty levels?
the possibilities are&amp;nbsp;endless!)&lt;/p&gt;
&lt;p&gt;Edit: and a screenshot for&amp;nbsp;posterity.&lt;/p&gt;
&lt;p&gt;&lt;img alt="WordsPy screenshot" src="https://sopoforic.github.io/images/snap0391.png" /&gt;&lt;/p&gt;</summary><category term="wordspy"></category></entry><entry><title>WordsPy, again</title><link href="https://sopoforic.github.io/wordspy-again.html" rel="alternate"></link><updated>2010-05-16T13:10:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2010-05-16:wordspy-again.html</id><summary type="html">&lt;p&gt;Well, the bad news is that wordspy still does nothing other than scroll new
lines onto the screen. The good news is that it does it in a better&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;In order to deal with letters dropping (due to letters below them being removed)
at the same time as a new line was scrolling up, it was necessary to re-engineer
the whole thing. Now letters store their current location, and it’s modified
whenever necessary by the newlinescroll and drop actions. This does have some
other benefits, too. For example, it simplifies drawing the new line onto the
screen somewhat. Before, I was&amp;nbsp;doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;481&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, since I initialize the letters with their location, I can just&amp;nbsp;do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is rather more&amp;nbsp;readable.&lt;/p&gt;
&lt;p&gt;Lesson learned, though: don’t forget to empty the dirty rectangles list after
updating the screen. Once it grows to 64 items or so, it noticeably slows down
the game. I’m fairly sure it shouldn’t contain more than a dozen or so items
under normal usage, but I’ll have to remember to keep an eye on&amp;nbsp;it.&lt;/p&gt;</summary><category term="wordspy"></category><category term="python"></category></entry><entry><title>New Project: WordsPy</title><link href="https://sopoforic.github.io/new-project-wordspy.html" rel="alternate"></link><updated>2010-05-15T09:09:00-04:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2010-05-15:new-project-wordspy.html</id><summary type="html">&lt;p&gt;I found that I wanted to play Word Zap/Word Jolt/Bookworm/whatever word
construction game, but I didn’t seem to have one on hand, and &lt;a href="http://www.popcap.com/games/free/bookworm"&gt;the version of
Bookworm I found&lt;/a&gt; was far from
satisfying. So, I did what anyone would do: set out to make my&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;I’ve been wanting to learn to use pygame for a while, and this seemed like a
good opportunity. I’ve had my fair share of trouble so far, but I think I’m
beginning to get a handle on how to use it. It’s
&lt;a href="http://bitbucket.org/sopoforic/wordspy"&gt;here&lt;/a&gt; for now, though it’s not playable
yet&amp;#8212;it only generates the letters and scrolls them onto the screen. Still, it’s
a&amp;nbsp;start.&lt;/p&gt;</summary><category term="wordspy"></category></entry><entry><title>Arrays for Fun and Profit</title><link href="https://sopoforic.github.io/arrays-for-fun-and-profit.html" rel="alternate"></link><updated>2010-02-21T10:48:00-05:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2010-02-21:arrays-for-fun-and-profit.html</id><summary type="html">&lt;p&gt;My greasemonkey script for filling in a bid on eBay started out fairly horrible,
referencing element IDs that seemed to differ based on the phase of the moon.
It was terribly difficult to maintain and did not function&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Epiphany: I discovered an element &lt;span class="caps"&gt;ID&lt;/span&gt; I could safely use that seems constant.
Also, discovered that &lt;code&gt;document.getElementsByName&lt;/code&gt; seems to work in (at least
recent versions of) firefox&amp;#8212;wasn’t there some recommendation against using that
a while back? My knowledge of javascript is poor. Anyway, between those two, it
became much simpler to maintain the script, and it worked much better, to&amp;nbsp;boot.&lt;/p&gt;
&lt;p&gt;Epiphany the second (third?): Javascript arrays let you do &lt;code&gt;array.push(value)&lt;/code&gt;,
so now I push the patterns into an array, which means I can divide them up by
language and add new ones without worrying about which index the new pattern
should use. Super. Now adding a new currency/language pair is as simple as
adding a single line pushing the pattern into the&amp;nbsp;array.&lt;/p&gt;
&lt;p&gt;Unfortunately, I can’t safely (for my paranoid definition of safe) just run the
regex on the whole document–if a sneaky auctioneer inserted “Enter &lt;span class="caps"&gt;US&lt;/span&gt; $500.00 or
more” in the auction description, and the auction was actually in another
currency, then the English/&lt;span class="caps"&gt;USD&lt;/span&gt; pattern would pick up that $500 text before the
other-currency patterns ran, and the bid box would be filled with that value. Of
course, the user would still have to click the button to place the bid, and then
confirm it, but remember: paranoid. As long as eBay doesn’t decide to remove the
table IDs or something, though, this shouldn’t be an&amp;nbsp;issue.&lt;/p&gt;
&lt;p&gt;Next up is to try to get the script to work on the outbid pages that present
themselves immediately after entering a bid that’s too low. Magic 8-Ball says:
outlook&amp;nbsp;good.&lt;/p&gt;</summary><category term="autofill-ebay"></category><category term="javascript"></category><category term="greasemonkey"></category></entry><entry><title>Awari AI</title><link href="https://sopoforic.github.io/awari-ai.html" rel="alternate"></link><updated>2010-02-21T09:01:00-05:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2010-02-21:awari-ai.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve sorted out the &lt;span class="caps"&gt;BASIC&lt;/span&gt; version of Awari I&amp;#8217;m porting into the &amp;#8216;draw the board&amp;#8217;
routine, the &amp;#8216;make a move&amp;#8217; routine and the &amp;#8216;incomprehensible &lt;span class="caps"&gt;AI&lt;/span&gt;&amp;#8217; routine. The &lt;span class="caps"&gt;AI&lt;/span&gt;
seems to first sow from the first nonempty pit, then makes some weird comparison
and modifies a&amp;nbsp;value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;860 FOR I=0 TO N-1:IF F(N)*6+K=INT(F(I)/6^(7-C)+.1) THEN Q=Q-2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason for that is fairly inscrutable. F is some array, and the program
claims to have a learning mechanism to improve the &lt;span class="caps"&gt;AI&lt;/span&gt;, so I suspect this is that
mechanism, but I&amp;#8217;m not at all sure how it&amp;#8217;s meant to work. I think I&amp;#8217;ll have to
make a flow chart or something to decipher this thing. This would be easier if
the variables had meaningful names. I remember once, when I was first learning
to program, I thought that using meaningful names was a big waste of time, since
after all the code should be pretty self-evident, right? A second look at my
code after some weeks disabused me of that notion, and this serves to reinforce
that: code should be self-evident, but it won&amp;#8217;t be if you don&amp;#8217;t work at&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Oh well. With any luck, I&amp;#8217;ll be able to sort this out with an hour or so of
concerted effort–it&amp;#8217;s just that reading &lt;span class="caps"&gt;BASIC&lt;/span&gt; is giving me a headache and I
haven&amp;#8217;t yet put in the requisite time. I must&amp;nbsp;persevere!&lt;/p&gt;</summary><category term="awari"></category><category term="BASIC"></category><category term="porting"></category></entry><entry><title>Awari</title><link href="https://sopoforic.github.io/awari.html" rel="alternate"></link><updated>2010-02-13T06:40:00-05:00</updated><author><name>Tracy Poff</name></author><id>tag:sopoforic.github.io,2010-02-13:awari.html</id><summary type="html">&lt;p&gt;Trying to decipher an ancient implementation of Awari in a dialect of &lt;span class="caps"&gt;BASIC&lt;/span&gt; I’m
not familiar with.&amp;nbsp;Fun!&lt;/p&gt;</summary><category term="awari"></category><category term="BASIC"></category><category term="porting"></category></entry></feed>